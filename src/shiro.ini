[main]
jdbcRealm = main.java.com.kiraula.tulsi.ShrioProject.shiro.JDBCRealm
sha256Matcher = org.apache.shiro.authc.credential.Sha256CredentialsMatcher
securityManager.realms=$jdbcRealm
iniRealm.credentialsMatcher = $sha256Matcher


#--------------------------------------------------------------------------------------------------------------------------------------------
#Just defining non-empty [users] or [roles] sections will automatically trigger the creation of an org.apache.shiro.realm.text.IniRealm #instance and make it available in the [main] section under the name iniRealm. You can configure it like any other object as described above.
#-------------------------------------------------------------------------------------------------------------------------------------------

[users]

#--------------------------------------------------------------------------------------------------------------------------------------------
#username=password,roleName1,roleName2,...roleNameN 
#user passwors should be in encrypted form using any hash algo or can use Shiro's Command Line Hasher

#Once you’ve specified the hashed text password values, you have to tell Shiro that these are encrypted. You do that by configuring the #implicitly created iniRealm in the [main] section to use an appropriate CredentialsMatcher implementation corresponding to the hash #algorithm you’ve specified.

#--------------------------------------------------------------------------------------------------------------------------------------------

tulsi=tulsi,Adminstrator


[roles]
#The [roles] section allows you to associate Permissions with the roles defined in the [users] section.
#roleNAme = permission1,permission2, ...so on

Adminstrator = *
